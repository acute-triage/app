import "../../Fastfile"

default_platform(:ios)


platform :ios do
  # Authenticate with Apple Store
  private_lane :authenticate_apple_store do
    app_store_connect_api_key(
      key_id: ENV["ASC_KEY_ID"],
      issuer_id: ENV["ASC_ISSUER_ID"],
      key_content: ENV["ASC_KEY_P8"],
      is_key_content_base64: true,
      in_house: false
    )
  end

  # Build iOS app
  lane :build_ipa do |options|
    # Reuse parent fastfile tasks
    fetch_dependencies
    build_autogenerated_code

    build(
      type: "ipa",
      no_codesign: options.fetch(:no_codesign, false),
      config_only: options.fetch(:config_only, false),
      build_number: options.fetch(:build_number, get_build_number()),
      version_number: options.fetch(:version_number, get_version_from_pubspec())
    )
  end


  desc "Release a new build to Apple Store"
  lane :release_app_store do |options|
    authenticate_apple_store

    commit = last_git_commit
    build_number = options.fetch(:build_number, get_build_number())
    version_number = options.fetch(:version_number, get_version_from_pubspec())

    UI.message("Starting iOS release for commit(#{commit[:abbreviated_commit_hash]}) version(#{version_number}) build(#{build_number})")

    # Sync certificates and profiles using match
    sync_code_signing(
      type: "appstore",
      readonly: true,
    )

    build_ipa(
      build_number: build_number,
      version_number: version_number
    )

    build_app(
      skip_build_archive: true,
      archive_path: "../build/ios/archive/Runner.xcarchive",
    )

    # If GoogleService-Info.plist exists and Pods/FirebaseCrashlytics exists
    # Upload symbols to Firebase Crashlytics
    if File.file?("../ios/Runner/GoogleService-Info.plist") && File.directory?("../ios/Pods/FirebaseCrashlytics")
      upload_symbols_to_crashlytics(
        gsp_path: "../ios/Runner/GoogleService-Info.plist"
      )
    end

    upload_to_testflight(
      skip_waiting_for_build_processing: true
    )
  end
end